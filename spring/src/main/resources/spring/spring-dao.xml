<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/tx
          http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">


  <!--配置整合mybatis过程-->
  <!--1.加载配置JDBC文件 -->
  <context:property-placeholder ignore-resource-not-found="true"
    location="classpath:jdbc/jdbc-connection.properties,classpath:jdbc/jdbc-config.properties"
    ignore-unresolvable="true"/>

  <!-- 主库数据源 -->
  <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
    destroy-method="close">
    <!-- 基本属性 url、user、password -->
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    <!-- 配置初始化大小、最小、最大 -->
    <property name="initialSize" value="${jdbc.initialSize}"/>
    <property name="minIdle" value="${jdbc.minIdle}"/>
    <property name="maxActive" value="${jdbc.maxActive}"/>
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${jdbc.maxWait}"/>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
    <!-- 校验语句 -->
    <property name="validationQuery" value="SELECT 1"/>
    <property name="testWhileIdle" value="true"/>
    <property name="testOnBorrow" value="false"/>
    <property name="testOnReturn" value="false"/>
    <!-- 配置监控统计拦截的filters -->
    <property name="filters" value="stat"/>
  </bean>

  <!-- 主库数据源 -->
  <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
    destroy-method="close">
    <!-- 基本属性 url、user、password -->
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <property name="url" value="${jdbc.url2}"/>
    <property name="username" value="${jdbc.username2}"/>
    <property name="password" value="${jdbc.password2}"/>
    <!-- 配置初始化大小、最小、最大 -->
    <property name="initialSize" value="${jdbc.initialSize}"/>
    <property name="minIdle" value="${jdbc.minIdle}"/>
    <property name="maxActive" value="${jdbc.maxActive}"/>
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${jdbc.maxWait}"/>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
    <!-- 校验语句 -->
    <property name="validationQuery" value="SELECT 1"/>
    <property name="testWhileIdle" value="true"/>
    <property name="testOnBorrow" value="false"/>
    <property name="testOnReturn" value="false"/>
    <!-- 配置监控统计拦截的filters -->
    <property name="filters" value="stat"/>
  </bean>

  <!--动态数据源配置-->
  <bean id="dataSource" class="spring.common.datasource.DynamicDataSource">
    <!--引入定义好的数据源-->
    <property  name="targetDataSources">
      <map key-type="java.lang.String">
        <entry key="business" value-ref="dataSource1" />
        <entry key="base" value-ref="dataSource2" />
      </map>
    </property>
    <!--定义默认数据源-->
    <property name="defaultTargetDataSource" ref="dataSource1" />
  </bean>

  <!-- 为Mybatis创建SqlSessionFactory，同时指定数据源 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="typeAliasesPackage" value="spring.*"/>
    <property name="mapperLocations" value="classpath:/mapper/*.xml"/>
    <property name="plugins">
      <array>
        <bean class="com.github.pagehelper.PageInterceptor">
          <property name="properties">
            <value>
              helperDialect=mysql
            </value>
          </property>
        </bean>
      </array>
    </property>
  </bean>


  <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
  <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="spring.repository"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>


<!--  &lt;!&ndash;3、配置SqlSessionFactory对象&ndash;&gt;-->
<!--  <bean id="aclSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
<!--    &lt;!&ndash;注入数据库连接池&ndash;&gt;-->
<!--    <property name="dataSource" ref="dataSource"/>-->
<!--    &lt;!&ndash;扫描sql配置文件:mapper需要的xml文件&ndash;&gt;-->
<!--    <property name="mapperLocations" value="classpath*:cn/self/auth/mapper/*.xml"/>-->
<!--  </bean>-->

<!--  &lt;!&ndash;4、配置扫描Dao接口包,动态实现DAO接口,注入到spring容器&ndash;&gt;-->
<!--  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--    &lt;!&ndash;注入SqlSessionFactory&ndash;&gt;-->
<!--    <property name="sqlSessionFactoryBeanName" value="aclSqlSessionFactory"/>-->
<!--    &lt;!&ndash; 给出需要扫描的Dao接口&ndash;&gt;-->
<!--    <property name="basePackage" value="spring.auth.acl.repository"/>-->
<!--  </bean>-->
  <!-- 事务管理器 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 启动注解事务 -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

  <!-- ehcache -->
  <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    <property name="configLocation" value="classpath:ehcache.xml"></property>
  </bean>
  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
    <property name="cacheManager" ref="ehcache"></property>
  </bean>
  <cache:annotation-driven cache-manager="cacheManager" />


</beans>